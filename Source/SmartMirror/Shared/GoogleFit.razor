@using SmartMirror.Data.GoogleFit
@inject GoogleFitState State
@inject IJSRuntime JSRuntime

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">GOOGLE FIT</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (string.IsNullOrEmpty(Token) && CodeResponse != null)
            {
                <p>@User</p>
                <p>@CodeResponse?.user_code</p>
                <p>@CodeResponse?.verification_url</p>
            }

            @if (Weight != null)
            {
                <div class="col-12">
                    <canvas id="@PieElement" width="400" height="150"></canvas>
                </div>
            }
        </div>
    </div>
</div>
<br />

@code {
    private bool Enabled => State.Enabled;
    private string PieElement;

    private Timer Timer { get; set; }
    private string Time { get; set; }

    private GoogleCodeResponse CodeResponse => State.GoogleCodeResponse;
    private IEnumerable<WeightDataPoint> Weight => State.WeightData;
    private string Token => State.Token;

    private Dictionary<string, Dataset<float>> datasets { get; set; }

    [Parameter]
    public string User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PieElement = $"{User}googleFit";
        State.OnChange += StateHasChangedAsync;
        State.SetEnabled(true);

        if (string.IsNullOrEmpty(Token))
        {
            await State.StartAuthorizationAsync();
            State.AuthorizationPollingAsync(User);
        }

        Timer = new Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(async () =>
            {
                try
                {
                    if (!string.IsNullOrEmpty(Token))
                    {
                        await State.GetWeight(30);
                        PopulateWeightDatasets($"{User} Weight");
                        StateHasChanged();
                    }
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 29000 * 1000);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (datasets?.Any() == true && Enabled)
        {
            await JSRuntime.InvokeAsync<string>("renderChart", PieElement, Weight.Select(p => p.StartTime.ToShortDateString()), datasets.Values);
        }
    }

    private void PopulateWeightDatasets(string label)
    {
        datasets = new Dictionary<string, Dataset<float>>();
        Random random = new Random();
        foreach (var weightEntry in Weight)
        {
            if (!datasets.ContainsKey(label) && weightEntry.Value != null)
            {
                int r = random.Next(0, 256), g = random.Next(0, 256), b = random.Next(0, 256);
                datasets.Add(label, new Dataset<float>
                {
                    id = label,
                    label = label,
                    data = new List<float> { weightEntry.Value.Value },
                    fill = false,
                    backgroundColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderWidth = 1
                });
            }
            else
            {
                var stationDataset = datasets[label];
                stationDataset.data.Add(weightEntry.Value.Value);
            }
        }
    }

    public async void StateHasChangedAsync()
    {
        if (!string.IsNullOrEmpty(Token) && Weight == null)
        {
            await State.GetWeight(30);
            PopulateWeightDatasets($"{User} Weight");
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
        Timer?.Dispose();
    }
}
