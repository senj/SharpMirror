@using SmartMirror.Data.GoogleFit
@inject GoogleFitState State
@inject IJSRuntime JSRuntime

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">GOOGLE FIT (@User)</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (string.IsNullOrEmpty(Token) && CodeResponse != null)
            {
                <p>@User</p>
                <p>@CodeResponse?.user_code</p>
                <p>@CodeResponse?.verification_url</p>
            }

        <row>
            <div class="col-12">
                @if (Weight != null)
                {
                    <div class="col-12">
                        <canvas id="@PieElementWeight" width="400" height="150"></canvas>
                    </div>
                }
            </div>
        </row>
        <row>
            <div class="col-12">
                @if (Activity != null)
                {
                    <div class="col-12">
                        <canvas id="@PieElementActivity" width="400" height="150"></canvas>
                    </div>
                }
            </div>
        </row>
        </div>
    </div>
</div>
<br />

@code {
    private bool Enabled => State.Enabled;
    private string PieElementWeight;
    private string PieElementActivity;

    private Timer Timer { get; set; }
    private string Time { get; set; }

    private GoogleCodeResponse CodeResponse => State.GetGoogleCodeResponse(User);
    private IEnumerable<WeightDataPoint> Weight => State.GetWeightData(User);
    private IEnumerable<ActivityDataPoint> Activity => State.GetActivityData(User);
    private string Token => State.GetToken(User);

    private Dictionary<string, Dataset<float>> weightDatasets { get; set; }
    private Dictionary<string, Dataset<float>> activityDatasets { get; set; }

    [Parameter]
    public string User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PieElementWeight = $"{User}googleWeight";
        PieElementActivity = $"{User}googleActivity";
        State.OnChange += StateHasChangedAsync;

        if (string.IsNullOrEmpty(Token))
        {
            await State.StartAuthorizationAsync(User);
            State.AuthorizationPollingAsync(User);
        }

        Timer = new Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(async () =>
            {
                try
                {
                    if (!string.IsNullOrEmpty(Token))
                    {
                        await State.UpdateWeightData(User, 30);
                        PopulateWeightDatasets($"{User} Weight");
                        PopulateActivityDatasets();
                        StateHasChanged();
                    }
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 29000 * 1000);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (weightDatasets?.Any() == true && Enabled)
        {
            await JSRuntime.InvokeAsync<string>("renderChart", PieElementWeight, Weight.Select(p => p.StartTime.ToShortDateString()), weightDatasets.Values);
        }

        if (activityDatasets?.Any() == true && Enabled)
        {
            await JSRuntime.InvokeAsync<string>("renderChart", PieElementActivity, 
                Activity.Where(p => p.Type == 7 || p.Type == 8).Select(p => p.StartTime.ToShortDateString()).Distinct(), activityDatasets.Values);
        }
    }

    private void PopulateWeightDatasets(string label)
    {
        weightDatasets = new Dictionary<string, Dataset<float>>();
        foreach (var weightEntry in Weight)
        {
            if (!weightDatasets.ContainsKey(label) && weightEntry.Value != null)
            {
                int r = 255, g = 255, b = 255;
                weightDatasets.Add(label, new Dataset<float>
                {
                    id = label,
                    label = label,
                    data = new List<float> { weightEntry.Value.Value },
                    fill = false,
                    backgroundColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderWidth = 1
                });
            }
            else
            {
                var tempDataset = weightDatasets[label];
                tempDataset.data.Add(weightEntry.Value.Value);
                weightDatasets[label] = tempDataset;
            }
        }
    }

    private void PopulateActivityDatasets()
    {
        activityDatasets = new Dictionary<string, Dataset<float>>();

        var walkingActivities = Activity
            .Where(p => p.Type == 7)
            .GroupBy(p => p.StartTime.DayOfYear)
            .ToDictionary(x => x.Key, y => (y.ToList().Sum(p => p.Duration.TotalMinutes)));

        var runningActivities = Activity
            .Where(p => p.Type == 8)
            .GroupBy(p => p.StartTime.DayOfYear)
            .ToDictionary(x => x.Key, y => (y.ToList().Sum(p => p.Duration.TotalMinutes)));

        string key = "Walking";
        foreach (var activityEntry in walkingActivities)
        {
            if (!activityDatasets.ContainsKey(key) && key != null)
            {
                int r = 255, g = 255, b = 255;
                activityDatasets.Add(key, new Dataset<float>
                {
                    id = key,
                    label = key,
                    data = new List<float> { (float)activityEntry.Value },
                    fill = false,
                    backgroundColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderWidth = 1
                });
            }
            else
            {
                var tempDataset = activityDatasets[key];
                tempDataset.data.Add((float)activityEntry.Value);
                activityDatasets[key] = tempDataset;
            }
        }

        key = "Running";
        foreach (var activityEntry in runningActivities)
        {
            if (!activityDatasets.ContainsKey(key) && key != null)
            {
                int r = 255, g = 255, b = 255;
                activityDatasets.Add(key, new Dataset<float>
                {
                    id = key,
                    label = key,
                    data = new List<float> { (float)activityEntry.Value },
                    fill = false,
                    backgroundColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderWidth = 1
                });
            }
            else
            {
                var tempDataset = activityDatasets[key];
                tempDataset.data.Add((float)activityEntry.Value);
                activityDatasets[key] = tempDataset;
            }
        }
    }

    public async void StateHasChangedAsync()
    {
        if (!string.IsNullOrEmpty(Token) && Weight == null)
        {
            await State.UpdateWeightData(User, 30);
            PopulateWeightDatasets($"Weight");
            PopulateActivityDatasets();
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
        Timer?.Dispose();
    }
}
