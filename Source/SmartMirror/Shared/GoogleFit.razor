@using SmartMirror.Data.GoogleFit
@inject GoogleFitService GoogleFitService
@inject IJSRuntime JSRuntime

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">GOOGLE FIT</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (CodeResponse != null)
            {
                <p>@CodeResponse?.user_code</p>
                <p>@CodeResponse?.verification_url</p>
            }

            @if (Weight != null)
            {
                <div class="col-12">
                    <canvas id="googleFit" width="400" height="150"></canvas>
                </div>
            }
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    private string Time { get; set; }
    private GoogleCodeResponse CodeResponse { get; set; }
    private IEnumerable<WeightDataPoint> Weight { get; set; }
    private Dictionary<string, Dataset<float>> datasets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //CodeResponse = await GoogleFitService.StartAuthorizationAsync();
        //await GoogleFitService.AuthorizationPolling(CodeResponse)
        //    .ContinueWith((response) =>
        //    {
        //        if (response != null)
        //        {
        //            CodeResponse = null;
        //        }
        //    });

        //var timer = new Timer((_) =>
        //{
        //    Time = DateTime.UtcNow.ToString();
        //    InvokeAsync(async () =>
        //    {
        //        try
        //        {
        //            string token = await GoogleFitService.GetAccessTokenAsync();
        //            if (!string.IsNullOrEmpty(token))
        //            {
        //                Weight = await GoogleFitService.GetWeight(token, 30);
        //                PopulateWeightDatasets("Lukas");
        //                StateHasChanged();
        //            }
        //        }
        //        catch (ObjectDisposedException)
        //        {
        //        }
        //    });
        //}, null, 0, 29000 * 1000);

        //await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (datasets?.Any() == true && Show)
        {
            await JSRuntime.InvokeAsync<string>("renderChart", "googleFit", Weight.Select(p => p.StartTime.ToShortDateString()), datasets.Values);
        }
    }

    private void PopulateWeightDatasets(string user)
    {
        datasets = new Dictionary<string, Dataset<float>>();
        Random random = new Random();
        foreach (var weightEntry in Weight)
        {
            if (!datasets.ContainsKey(user) && weightEntry.Value != null)
            {
                int r = random.Next(0, 256), g = random.Next(0, 256), b = random.Next(0, 256);
                datasets.Add(user, new Dataset<float>
                {
                    id = user,
                    label = user,
                    data = new List<float> { weightEntry.Value.Value },
                    fill = false,
                    backgroundColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderColor = new string[] { $"rgba({r}, {g}, {b}, 1)" },
                    borderWidth = 1
                });
            }
            else
            {
                var stationDataset = datasets[user];
                stationDataset.data.Add(weightEntry.Value.Value);
            }
        }
    }
}
