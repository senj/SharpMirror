@using SmartMirror.Data.Clock;
@inject ClockState State
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-6">
            <p class="important">@DateTime.Now.ToString("HH:mm")</p>
        </div>
        <div class="col-6">
            @if (!string.IsNullOrEmpty(State.TimerName))
            {
                <span>@State.TimerName</span><br />
                <span class="timer">@State.TimerDuration.Hours.ToString("00"):@State.TimerDuration.Minutes.ToString("00"):@State.TimerDuration.Seconds.ToString("00")</span>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <p>@DateTime.Now.ToString("dddd, dd. MMMM") (KW @KW)</p>
        </div>
    </div>
</div>
<br />

@code  {
    private string Time { get; set; }
    private int KW { get; set; }
    private Timer Timer { get; set; }

    private bool Enabled => State.Enabled;

    protected override void OnInitialized()
    {
        State.OnTimerChange += StateHasChangedAsync;

        CultureInfo ci = new CultureInfo("de-DE");
        KW = ci.Calendar.GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        Timer = new Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 1000);

        base.OnInitialized();
    }

    public async void StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnTimerChange -= StateHasChangedAsync;
        Timer?.Dispose();
    }
}
