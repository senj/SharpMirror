@using SmartMirror.SmartHome.Hue;
@inject HueService HueService
@inject IStringLocalizer<HueLights> Localizer

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">HUE LIGHTS</p>
        </div>
    </div>
    @if (LightInfo == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-6">
                <p>
                    <b>@LightInfo.name</b> &emsp;
                    @if (LightInfo.state?.on == true)
                    {
                        <span class="lightIcon">&#9746;</span>
                    }
                    else
                    {
                        <span class="lightIcon">&#9744;</span>
                    }
                </p>
                @{
                    double bri = Math.Round(Convert.ToDouble(LightInfo.state.bri) / 254 * 100, 0);
                    double sat = Math.Round(Convert.ToDouble(LightInfo.state.sat) / 254 * 100, 0);
                    string color = $"hsl({ Math.Round(Convert.ToDouble(LightInfo.state.hue) / 178, 0) }, {sat}%, {bri}%)!important";
                }

                <span>@Localizer["Brightness"]: @bri%</span>
                <span>@Localizer["Saturation"]: @sat%</span>
                <br />
                <span>@Localizer["Color"]: <span style="background-color: @color">&emsp;&emsp;</span></span>
            </div>
        </div>
    }
</div>
<br />

@code  {
    [Parameter]
    public bool Show { get; set; }

    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    private HueLightInfo LightInfo { get; set; }
    EventHandler<LightStateChangedEventArgs> LightStateChangedEventHandler;

    protected override async Task OnInitializedAsync()
    {
        LightStateChangedEventHandler = new EventHandler<LightStateChangedEventArgs>(OnLightStateChanged);
        HueService.LightStateChanged += OnLightStateChanged;

        LightInfo = await HueService.GetLightInfoAsync(1);
        Layout.AddToParent<HueLights>(this);
        base.OnInitializedAsync();
    }

    public async Task SwitchLightAsync(int lightId, LightState lightState = null)
    {
        LightInfo = await HueService.GetLightInfoAsync(1);
        await HueService.SetLightStateAsync(lightId, new LightState
        {
            on = lightState?.on ?? !LightInfo.state.on,
            sat = lightState?.sat ?? LightInfo.state.sat,
            bri = lightState?.bri ?? LightInfo.state.bri,
            hue = lightState?.hue ?? LightInfo.state.hue
        });
    }

    private void OnLightStateChanged(object sender, LightStateChangedEventArgs args)
    {
        LightInfo = HueService.GetLightInfoAsync(1).GetAwaiter().GetResult();
        InvokeAsync(() => StateHasChanged());
    }
}
