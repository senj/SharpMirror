@using SmartMirror.SmartHome.Hue;
@inject IStringLocalizer<HueLights> Localizer
@inject HueState State
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">HUE LIGHTS</p>
        </div>
    </div>
    @if (LightInfo == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-6">
                <p>
                    <b>@LightInfo.name</b> &emsp;
                    @if (LightInfo.state?.on == true)
                    {
                        <span class="lightIcon">&#9746;</span>
                    }
                    else
                    {
                        <span class="lightIcon">&#9744;</span>
                    }
                </p>
                @if (ShowDetails)
                {                    
                    double bri = Math.Round(Convert.ToDouble(LightInfo.state.bri) / 254 * 100, 0);
                    double sat = Math.Round(Convert.ToDouble(LightInfo.state.sat) / 254 * 100, 0);
                    string color = $"hsl({ Math.Round(Convert.ToDouble(LightInfo.state.hue) / 178, 0) }, {sat}%, {bri}%)!important";

                    <span>@Localizer["Brightness"]: @bri%</span>
                    <span>@Localizer["Saturation"]: @sat%</span>
                    <br />
                    <span>@Localizer["Color"]: <span style="background-color: @color">&emsp;&emsp;</span></span>
                }
            </div>
        </div>
    }
</div>
<br />

@code  {

    private bool Enabled => State.Enabled;
    private bool ShowDetails => State.ShowDetails;
    private HueLightInfo LightInfo => State.HueLightInfo;

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChangedAsync;

        if (Enabled)
        {
            await State.GetLightInfoAsync(1);
        }
    }

    public async void StateHasChangedAsync()
    {
        if (Enabled && LightInfo == null)
        {
            await State.GetLightInfoAsync(1);
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
    }
}
