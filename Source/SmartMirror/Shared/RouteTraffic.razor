@using SmartMirror.Data.Routes
@inject RouteState State
@implements IDisposable

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">ROUTES AND TRAFFIC</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (RouteResponse == null || !RouteResponse.routes.Any())
            {
                <p>No route requested.</p>
            }
            else
            {
                var summary = RouteResponse.routes.FirstOrDefault().summary;
                <p>@SourceGeoResponse.results.FirstOrDefault().address.freeformAddress -</p>
                <p>@DestinationGeoResponse.results.FirstOrDefault().address.freeformAddress</p>
                <br />

                <p>@(summary.lengthInMeters / 1000) km</p>

                double durationInHours = Math.Floor(summary.liveTrafficIncidentsTravelTimeInSeconds / 3600d);
                double durationInMinutes = summary.liveTrafficIncidentsTravelTimeInSeconds / 60 % 60;
                double delayInHours = Math.Floor(summary.trafficDelayInSeconds / 3600d);
                double delayInMinutes = summary.trafficDelayInSeconds / 60 % 60;
                string trafficString = string.Empty;

                if (durationInHours != 0)
                {
                    trafficString = $"{durationInHours} h";
                }

                if (durationInMinutes != 0)
                {
                    trafficString += $" {durationInMinutes} min";
                }

                if (delayInHours != 0 && delayInMinutes != 0)
                {
                    trafficString += $" ({delayInHours} h {delayInMinutes} min delay)";
                }
                else if (delayInMinutes != 0)
                {
                    trafficString += $" ({delayInMinutes} min delay)";
                }

                <p>@trafficString</p>

                if (summary.departureTime.Date != summary.arrivalTime.Date)
                {
                    <p>
                        @summary.departureTime.ToString("dd.MM.") <b>@summary.departureTime.ToString("HH:mm")</b>
                        - @summary.arrivalTime.ToString("dd.MM.") <b>@summary.arrivalTime.ToString("HH:mm")</b>
                    </p>
                }
                else
                {
                    <p>
                        @summary.departureTime.ToString("dd.MM.") <b>@summary.departureTime.ToString("HH:mm")</b>
                        - <b>@summary.arrivalTime.ToString("HH:mm")</b>
                    </p>
                }
            }
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    public RouteResponse RouteResponse => State.RouteResponse;
    public GeosearchResponse SourceGeoResponse => State.Source;
    public GeosearchResponse DestinationGeoResponse => State.Destination;

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChangedAsync;

        try
        {
            await State.FindRouteAsync("Deutschland, 73240 Wendlingen am Neckar, Bessarabienstr. 32",
            "Deutschland, 73240 Wendlingen am Neckar, Wertstr. 20");
        }
        catch (Exception)
        {
        }
    }

    public async void StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
    }
}
