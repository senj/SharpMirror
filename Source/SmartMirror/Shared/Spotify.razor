@using SmartMirror.Data.Spotify;
@inject IJSRuntime JSRuntime
@inject SpotifyState State
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1" style="overflow: auto;">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">SPOTIFY</p>
        </div>
    </div>
    <img id="spotify_image" height="100" width="100" src="/images/spotify/spotify.png" style="float: left;" />
    @if (!ShowDetails)
    {
        <div class="row">
            <div class="col-6">
                <p id="spotify_track" style="font-weight: bold;"></p>
            </div>
            <div class="col-6">
                <p id="spotify_artist"></p>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-1">
                <p id="spotify_play"></p>
            </div>
            <div class="col-5">
                <p id="spotify_track" style="font-weight: bold;"></p>
            </div>
            <div class="col-6">
                <p id="spotify_artist"></p>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <p id="spotify_next"></p>
            </div>
            <div class="col-5">
                <p id="spotify_next_track" style="font-weight: bold;"></p>
            </div>
            <div class="col-6">
                <p id="spotify_next_artist"></p>
            </div>
        </div>
    }
</div>
<br />

@code {
    bool ShowDetails => State.ShowDetails;
    bool Enabled => State.Enabled;

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChangedAsync;
        State.OnNextSongRequested += OnNextSongRequested;
        State.SetShowDetails(true);
    }

    public async Task OnNextSongRequested()
    {
        await JSRuntime.InvokeVoidAsync("nextSong");
    }

    public async void StateHasChangedAsync()
    {
        if (Enabled)
        {
            await JSRuntime.InvokeVoidAsync("onSpotifyWebPlaybackSDKReady");
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
        State.OnNextSongRequested += OnNextSongRequested;
    }
}
