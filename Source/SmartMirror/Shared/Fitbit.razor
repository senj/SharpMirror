@using SmartMirror.Data.Fitbit
@using System.ComponentModel
@inject IJSRuntime JSRuntime
@inject FitbitState State
@inject IStringLocalizer<Fitbit> Localizer
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">FITBIT</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (User == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1"></h5>
                    <small>@User.displayName</small>
                </div>
                <p class="mb-1">@Localizer["Average steps"]: @User.averageDailySteps</p>
                <br />
                <div>
                    @*daily activity*@
                    <canvas id="activityChart0" width="400" height="150"></canvas>
                </div>
                <br />
                <p class="mb-1">@Localizer["Sleep efficiency"]: @Sleep.sleep.Where(p => p.isMainSleep).FirstOrDefault()?.efficiency% - @Math.Round(Sleep.summary.totalMinutesAsleep / 60f, 1) / @Math.Round(Sleep.summary.totalTimeInBed / 60f, 1) @Localizer["hours slept"]</p>
                <small>@Device?.deviceVersion: @Device?.batteryLevel% @Localizer["charged"]</small>
            }
        </div>
    </div>
</div>
<br />

@code {

    private bool Enabled => State.Enabled;

    private Data.Fitbit.User User => State.FitbitUserResponse?.user;
    private FitbitSleepResponse Sleep => State.FitbitSleepResponse;
    private FitbitDevice Device => State.FitbitDeviceResponse?.Last();
    private Dictionary<string, ActiveMinutes> ActiveMinutes => State.ActiveMinutes;

    private Dictionary<string, Dataset<float>> datasets { get; set; }

    private string _token;
    private string Token
    {
        get
        {
            return _token;
        }

        set
        {
            _token = value;
            OnPropertyChanged();
        }
    }

    private string Time { get; set; }
    private Timer Timer { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (string.IsNullOrEmpty(Token))
        {
            Token = await JSRuntime.InvokeAsync<string>("getFitbitToken");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChangedAsync;
        Timer = new Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(async () =>
            {
                try
                {
                    if (!string.IsNullOrEmpty(Token))
                    {
                        await UpdateDataAsync();
                        StateHasChanged();
                    }
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 300 * 1000);
    }

    private async Task UpdateDataAsync()
    {
        await State.PopulateDataAsync(Token, DateTime.UtcNow);
        await State.PopulateActiveMinutesAsync(Token);

        datasets = new Dictionary<string, Dataset<float>>();
        PopulateDatasets();
        StateHasChanged();

        if (Enabled && datasets?.Any() == true)
        {
            await JSRuntime.InvokeVoidAsync("renderPieChart", "activityChart0", new[] { "Very", "Fairly", "Lightly", "Sedentary" }, new Dataset<float>[] { datasets.Last().Value });
        }
    }

    protected void OnPropertyChanged(string name = null)
    {
        UpdateDataAsync();
    }

    private void PopulateDatasets()
    {
        if (ActiveMinutes == null) return;

        @foreach (var activityType in ActiveMinutes)
        {
            if (activityType.Key == "high")
            {
                if (activityType.Value?.VeryActive?.Any() == true)
                {
                    foreach (var record in activityType.Value.VeryActive)
                    {
                        SetRecord(activityType.Key, record);
                    }
                }
            }

            if (activityType.Key == "mid")
            {
                if (activityType.Value?.FairlyActive?.Any() == true)
                {
                    foreach (var record in activityType.Value.FairlyActive)
                    {
                        SetRecord(activityType.Key, record);
                    }
                }
            }

            if (activityType.Key == "low")
            {
                if (activityType.Value?.LightlyActive?.Any() == true)
                {
                    foreach (var record in activityType.Value.LightlyActive)
                    {
                        SetRecord(activityType.Key, record);
                    }
                }
            }

            if (activityType.Key == "verylow")
            {
                if (activityType.Value?.Sedentary?.Any() == true)
                {
                    foreach (var record in activityType.Value.Sedentary)
                    {
                        SetRecord(activityType.Key, record);
                    }
                }
            }
        }
    }

    private void SetRecord(string key, ActivitiesMinutes record)
    {
        int rActive = 255, gActive = 0, bActive = 0;
        int rMidActive = 255, gMidActive = 127, bMidActive = 39;
        int rLowActive = 206, gLowActive = 255, bLowActive = 38;
        int rNotActive = 38, gNotActive = 103, bNotActive = 255;

        if (!datasets.ContainsKey(record.dateTime))
        {
            datasets.Add(record.dateTime, new Dataset<float>
            {
                id = record.value,
                label = key,
                data = new List<float> { float.Parse(record.value) },
                fill = false,
                backgroundColor = new string[] { $"rgba({rActive}, {gActive}, {bActive}, 1)", $"rgba({rMidActive}, {gMidActive}, {bMidActive}, 1)",
                                                 $"rgba({rLowActive}, {gLowActive}, {bLowActive}, 1)" , $"rgba({rNotActive}, {gNotActive}, {bNotActive}, 1)" },
                borderColor = new string[] { $"rgba({rActive}, {gActive}, {bActive}, 1)", $"rgba({rMidActive}, {gMidActive}, {bMidActive}, 1)",
                                                 $"rgba({rLowActive}, {gLowActive}, {bLowActive}, 1)" , $"rgba({rNotActive}, {gNotActive}, {bNotActive}, 1)" },
                borderWidth = 1
            });
        }
        else
        {
            var dateDataset = datasets[record.dateTime];
            dateDataset.data.Add(float.Parse(record.value));
        }
    }

    public async void StateHasChangedAsync()
    {
        if (Enabled && State.FitbitUserResponse == null && !string.IsNullOrEmpty(Token))
        {
            await State.PopulateDataAsync(Token, DateTime.UtcNow);
        }

        if (Enabled && State.ActiveMinutes == null && !string.IsNullOrEmpty(Token))
        {
            await State.PopulateActiveMinutesAsync(Token);
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
        Timer?.Dispose();
    }
}
