@using SmartMirror.Data.WeatherForecast
@inject IStringLocalizer<CurrentWeather> Localizer
@inject WeatherForecastService ForecastService

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    @if (Forecast?.Current == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-4">
                <p class="important">@Forecast.Current.Temp °C</p>
                <p class="small">@Localizer["Feels like"]: @Forecast.Current.Feels_like °C</p>
            </div>
            <div class="col-4">
                <p class="important-symbol">@((MarkupString)ShowSimpleIcon(Forecast.Current.Weather.FirstOrDefault()?.Main))</p>
                @*<p class="small">@Forecast.Current.Weather.FirstOrDefault()?.Description</p>*@
            </div>
            <div class="col-4">
                <br />
                <p style="text-align: center;">Wind: @Forecast.Current.Wind_speed km/h</p>
                <p style="text-align: center;">&#9728; &uarr; @EpochToLocalTime(Forecast.Current.Sunrise).ToString("HH:mm") &nbsp; - &nbsp; &#9728; &darr; @EpochToLocalTime(Forecast.Current.Sunset).ToString("HH:mm")</p>
            </div>
        </div>

        @if (ShowForecast)
        {
            <div class="row">
                <table class="table" style="color:white;">
                    <tbody>
                        @foreach (Daily day in Forecast.Daily.Take(NumberOfDays))
                        {
                            <tr>
                                <th scope="row">@EpochToLocalTime(day.Dt).ToString("ddd, dd.MM.")</th>
                                <td class="weatherIcon">@(@ShowSimpleIcon(day.Weather.FirstOrDefault()?.Main))</td>
                                <td>
                                    &darr; @Math.Round(day.Temp.Min, 1) °C &nbsp;&nbsp; &uarr; @Math.Round(day.Temp.Max, 1) °C
                                    <br />@day.Weather.FirstOrDefault()?.Description
                                </td>
                                <td>@day.Wind_speed km/h</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <br />
        <p><em>Wetter komplett | Wetter klein</em></p>
    }
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public bool ShowForecast { get; set; }

    [Parameter]
    public int NumberOfDays { get; set; }

    private OneCallWeatherForecast Forecast;

    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Layout.AddToParent<CurrentWeather>(this);
        Forecast = await ForecastService.GetOneCallForecastAsync();
    }

    public void EnableForecast()
    {
        ShowForecast = true;
        StateHasChanged();
    }

    public void DisableForecast()
    {
        ShowForecast = false;
        StateHasChanged();
    }

    private DateTime EpochToLocalTime(int epochDateTime)
    {
        TimeSpan timeSpan = TimeSpan.FromSeconds(epochDateTime);
        DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return epoch.Add(timeSpan).ToLocalTime();
    }

    private MarkupString ShowSimpleIcon(string main)
    {
        if (main?.ToLower() == "clouds")
        {
            return (MarkupString)"&#9729;";
        }
        else if (main?.ToLower() == "thunderstorm")
        {
            return (MarkupString)"&#127785;";
        }
        else if (main?.ToLower() == "drizzle")
        {
            return (MarkupString)"&#127782;";
        }
        else if (main?.ToLower() == "rain")
        {
            return (MarkupString)"&#127783;";
        }
        else if (main?.ToLower() == "snow")
        {
            return (MarkupString)"&#127784;";
        }
        else if (main?.ToLower() == "mist" || main?.ToLower() == "fog")
        {
            return (MarkupString)"&#127787;";
        }
        else if (main?.ToLower() == "clear")
        {
            return (MarkupString)"&#9728;";
        }

        return (MarkupString)string.Empty;
    }
}
