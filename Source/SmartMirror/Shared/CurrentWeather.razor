@using SmartMirror.Data.WeatherForecast
@inject IStringLocalizer<CurrentWeather> Localizer
@inject WeatherState State
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    @if (Forecast?.Current == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-7">
                <p class="weather">@Math.Round(Forecast.Current.Temp, 1) °C</p>
            </div>
            <div class="col-5">
                @*<p class="important-symbol">@((MarkupString)ShowSimpleIcon(Forecast.Current.Weather.FirstOrDefault()?.Main))</p>*@
                <img src="@ShowIcon(Forecast.Current.Weather.FirstOrDefault()?.Main)" width="100" />
                @*<p class="small">@Forecast.Current.Weather.FirstOrDefault()?.Description</p>*@
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                <p class="small">Gefühlt: @Forecast.Current.Feels_like °C</p>
            </div>
            <div class="col-3">
                <p class="small">@Forecast.Current.Wind_speed km/h Wind</p>
            </div>
            <div class="col-6">
                <p style="text-align: center;">&#9728; &uarr; @EpochToLocalTime(Forecast.Current.Sunrise).ToString("HH:mm") &nbsp; - &nbsp; &#9728; &darr; @EpochToLocalTime(Forecast.Current.Sunset).ToString("HH:mm")</p>
            </div>
        </div>
                
        @if (ShowDetails)
        {
            <div class="row">
                <table class="table" style="color:white;">
                    <tbody>
                        @foreach (Daily day in Forecast.Daily.Take(NumberOfDays))
                        {
                        <tr>
                            <th scope="row">@EpochToLocalTime(day.Dt).ToString("ddd, dd.MM.")</th>
                            @*<td class="weatherIcon">@(@ShowSimpleIcon(day.Weather.FirstOrDefault()?.Main))</td>*@
                            <td><img src="@ShowIcon(day.Weather.FirstOrDefault()?.Main)" width="45" /></td>
                            <td>
                                &darr; @Math.Round(day.Temp.Min, 1) °C &nbsp;&nbsp; &uarr; @Math.Round(day.Temp.Max, 1) °C
                                <br />@day.Weather.FirstOrDefault()?.Description
                            </td>
                            <td>@day.Wind_speed km/h<br />@day.Uvi UV</td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>
<br />

@code {
    [Parameter]
    public int NumberOfDays { get; set; }

    public OneCallWeatherForecast Forecast => State.WeatherForecast;
    public bool Enabled => State.Enabled;
    public bool ShowDetails => State.ShowDetails;

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChangedAsync;

        if (Enabled)
        {
            await State.GetWeatherForecastAsync();
        }
    }

    private DateTime EpochToLocalTime(int epochDateTime)
    {
        TimeSpan timeSpan = TimeSpan.FromSeconds(epochDateTime);
        DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return epoch.Add(timeSpan).ToLocalTime();
    }

    private string ShowIcon(string main)
    {
        string basePath = "icons/weather/";
        if (main?.ToLower() == "clouds")
        {
            return basePath + "cloud.png";
        }
        else if (main?.ToLower() == "thunderstorm")
        {
            return basePath + "storm.png";
        }
        else if (main?.ToLower() == "drizzle")
        {
            return basePath + "rain_light.png";
        }
        else if (main?.ToLower() == "rain")
        {
            return basePath + "rain_heavy.png";
        }
        else if (main?.ToLower() == "snow")
        {
            return basePath + "snow.png";
        }
        else if (main?.ToLower() == "mist" || main?.ToLower() == "fog")
        {
            return basePath + "dust.png";
        }
        else if (main?.ToLower() == "clear")
        {
            return basePath + "sun.png";
        }

        return string.Empty;
    }

    private MarkupString ShowSimpleIcon(string main)
    {
        if (main?.ToLower() == "clouds")
        {
            return (MarkupString)"&#9729;";
        }
        else if (main?.ToLower() == "thunderstorm")
        {
            return (MarkupString)"&#127785;";
        }
        else if (main?.ToLower() == "drizzle")
        {
            return (MarkupString)"&#127782;";
        }
        else if (main?.ToLower() == "rain")
        {
            return (MarkupString)"&#127783;";
        }
        else if (main?.ToLower() == "snow")
        {
            return (MarkupString)"&#127784;";
        }
        else if (main?.ToLower() == "mist" || main?.ToLower() == "fog")
        {
            return (MarkupString)"&#127787;";
        }
        else if (main?.ToLower() == "clear")
        {
            return (MarkupString)"&#9728;";
        }

        return (MarkupString)string.Empty;
    }

    public async void StateHasChangedAsync()
    {
        if (Enabled && State.WeatherForecast == null)
        {
            await State.GetWeatherForecastAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
    }
}
