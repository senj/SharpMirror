@using Microsoft.Extensions.Logging;
@using SmartMirror.Data.Speech;
@using SmartMirror.Data.WeatherForecast;
@using SmartMirror.Data.Fuel;
@using SmartMirror.Data.Bring;
@using SmartMirror.Data.Calendar;
@using SmartMirror.Data.Spotify;
@using SmartMirror.Data.Routes;

@inject IJSRuntime JSRuntime
@inject SpeechRecognitionService SpeechService
@inject ILogger<Speech> Logger

@inject WeatherState WeatherState
@inject FuelState FuelState
@inject BringState BringState
@inject CalendarState CalendarState
@inject SpotifyState SpotifyState
@inject RouteState RouteState

<div class="container-fluid card-1 speech">
    <div class="row">
        <!-- display larger (click events) -->
        <div class="col-xl-1 d-none d-lg-block">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" onmousedown="startRecognition()" onmouseup="stopRecognition()" value="Voice" />*@
            <img id="speechStatusImageWeb" src="/icons/speech/@_symbol" width="25" height="25" />
        </div>
        <!-- only display on mobile (touch events) -->
        <div class="col-2 d-lg-none">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" ontouchstart="startRecognition()" ontouchend="stopRecognition()" value="Voice" />*@
            <img id="speechStatusImageMobile" src="/icons/speech/@_symbol" width="25" height="25" />
        </div>
        <div id="speechContainer" class="col-8 col-xl-8 overflow-auto">
            <span id="speechTextOutput" style="display: none;"></span><span>@_output</span>
        </div>
        <div class="col-xl-3 d-none d-lg-block">
            <span><img src="/icons/status/weather.png" width="25" height="25" class="icon @weatherDisplay" /></span>
            <span><img src="/icons/status/fuel.png" width="25" height="25" class="icon @fuelDisplay" /></span>
            <span><img src="/icons/status/bring.png" width="25" height="25" class="icon @bringDisplay" /></span>
            <span><img src="/icons/status/calendar.png" width="25" height="25" class="icon @calendarDisplay" /></span>
            <span><img src="/icons/status/spotify.png" width="25" height="25" class="icon @spotifyDisplay" /></span>
            <span><img src="/icons/status/routes.png" width="25" height="25" class="icon @routesDisplay" /></span>
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool VoiceOutput { get; set; }

    private string _symbol { get; set; } = "silent.png";
    private string _output { get; set; }

    string weatherDisplay;
    string fuelDisplay;
    string bringDisplay;
    string calendarDisplay;
    string spotifyDisplay;
    string routesDisplay;

    private static Func<string, Task> action;

    protected override void OnInitialized()
    {
        SetIcons();
        action = ValidateSpeechInput;
    }

    private async Task ValidateSpeechInput(string speechInput)
    {
        Logger.LogInformation("Validating {speechInput}.", speechInput);
        var recognitionResponse = await SpeechService.ValidateSpeechInputAsync(speechInput);
        _output = $" ({recognitionResponse.TopIntent})";

        if (VoiceOutput)
        {
            await JSRuntime.InvokeVoidAsync("speak", recognitionResponse.VoiceResponse);
        }

        SetIcons();
        await InvokeAsync(() => StateHasChanged());
    }

    [JSInvokable("SetSpeechInputCaller")]
    public static void SetSpeechInputCaller(string speechInput)
    {
        // This is async
        action.Invoke(speechInput);
    }

    private void SetIcons()
    {
        weatherDisplay = WeatherState.Enabled ? "icon-black" : "icon-disabled";
        fuelDisplay = FuelState.Enabled ? "icon-black" : "icon-disabled";
        bringDisplay = BringState.Enabled ? "icon-black" : "icon-disabled";
        calendarDisplay = CalendarState.Enabled ? "icon-black" : "icon-disabled";
        spotifyDisplay = SpotifyState.Enabled ? "icon-white" : "icon-disabled";
        routesDisplay = RouteState.Enabled ? "icon-black" : "icon-disabled";
    }
}