@using System.ComponentModel;
@using Microsoft.JSInterop;
@using SmartMirror.SmartHome.Hue;

@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row card-1">
        <!-- display larger (click events) -->
        <div class="col-xl-2 d-none d-lg-block">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" onmousedown="startRecognition()" onmouseup="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageWeb">&#128360;</p>
        </div>
        <!-- only display on mobile (touch events) -->
        <div class="col-4 d-lg-none">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" ontouchstart="startRecognition()" ontouchend="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageMobile">&#128360;</p>
        </div>
        <div id="speechContainer" class="col-8 col-xl-10 overflow-auto">
            <p id="speechTextOutput" />
        </div>
    </div>
</div>
<br />

@code {
    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    private async Task ValidateSpeechInputAsync(string speechInput)
    {
        if (speechInput.Contains("lukas"))
        {
            await JSRuntime.InvokeVoidAsync("speak", "wechsel profil zu lukas");
            Layout.SetProfile("lukas");
        }
        else if (speechInput.Contains("alisa"))
        {
            await JSRuntime.InvokeVoidAsync("speak", "wechsel profil zu alisa");
            Layout.SetProfile("alisa");
        }
        else if (speechInput.Contains("verkehr"))
        {
            await JSRuntime.InvokeVoidAsync("speak", "wechsel profil zu verkehr");
            Layout.SetProfile("verkehr");
        }
        else if (speechInput.Contains("spiegel"))
        {
            await JSRuntime.InvokeVoidAsync("speak", "wechsel profil zu spiegel");
            Layout.SetProfile("spiegel");
        }
        else if (speechInput.Contains("licht"))
        {
            ValidateHueLightsSpeech(speechInput);
        }
    }

    private async Task ValidateHueLightsSpeech(string speechInput)
    {
        var hueLights = Layout.GetFromParent<HueLights>();
        var lightState = new LightState();
        if (speechInput.Contains("licht an"))
        {
            lightState.on = true;
            lightState.sat = 0;
            lightState.bri = 127;
        }
        else if (speechInput.Contains("licht aus"))
        {
            lightState.on = false;
        }
        else if (speechInput.Contains("helles licht"))
        {
            lightState.on = true;
            lightState.sat = 0;
            lightState.bri = 254;
        }
        else if (speechInput.Contains("dunkles licht"))
        {
            lightState.on = true;
            lightState.sat = 0;
            lightState.bri = 50;
        }
        else if (speechInput.Contains("rotes licht"))
        {
            lightState.on = true;
            lightState.sat = 254;
            lightState.bri = 127;
            lightState.hue = 0;
        }
        else if (speechInput.Contains("blaues licht"))
        {
            lightState.on = true;
            lightState.sat = 254;
            lightState.bri = 127;
            lightState.hue = 42720;
        }
        else if (speechInput.Contains("grünes licht"))
        {
            lightState.on = true;
            lightState.sat = 254;
            lightState.bri = 127;
            lightState.hue = 22606;
        }
        // must always be last one
        else if (speechInput.Contains("licht"))
        {
            lightState = null;
        }

        hueLights.SwitchLightAsync(1, lightState);
    }

    #region STATIC PROPERTY HANDLING

    private static string _speechInput;
    public static string SpeechInput
    {
        get { return _speechInput; }

        set
        {
            if (_speechInput != value)
            {
                _speechInput = value;
                OnGlobalPropertyChanged("SpeechInput");
            }
        }
    }

    [JSInvokable]
    public static void SetSpeechInput(string speechInput)
    {
        SpeechInput = speechInput;
    }

    static event PropertyChangedEventHandler GlobalPropertyChanged = delegate { };
    static void OnGlobalPropertyChanged(string propertyName)
    {
        GlobalPropertyChanged(
            typeof(Speech),
            new PropertyChangedEventArgs(propertyName));
    }

    public Speech()
    {
        // This should use a weak event handler instead of normal handler
        GlobalPropertyChanged += this.HandleGlobalPropertyChanged;
    }

    void HandleGlobalPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case "SpeechInput":
                ValidateSpeechInputAsync(SpeechInput);
                break;
        }
    }

    #endregion
}