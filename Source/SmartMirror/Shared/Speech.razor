@using System.ComponentModel;
@using Microsoft.Extensions.Logging;
@using SmartMirror.SmartHome.Hue;
@using SmartMirror.Data.Speech;

@inject IJSRuntime JSRuntime
@inject SpeechRecognitionService SpeechService
@inject ILogger<Speech> Logger

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <!-- display larger (click events) -->
        <div class="col-xl-2 d-none d-lg-block">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" onmousedown="startRecognition()" onmouseup="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageWeb">@((MarkupString)_symbol)</p>
        </div>
        <!-- only display on mobile (touch events) -->
        <div class="col-4 d-lg-none">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" ontouchstart="startRecognition()" ontouchend="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageMobile">@((MarkupString)_symbol)</p>
        </div>
        <div id="speechContainer" class="col-8 col-xl-10 overflow-auto">
            <p id="speechTextOutput"></p><span>@_output</span>
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public bool VoiceOutput { get; set; }

    private string _symbol { get; set; } = "&#128360";
    private string _output { get; set; }

    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    private static Action<string> action;

    protected override void OnInitialized()
    {
        action = ValidateSpeechInput;
    }

    private void ValidateSpeechInput(string speechInput)
    {
        Logger.LogInformation("Validating {speechInput}.", speechInput);
        var recognitionResponse = SpeechService.ValidateSpeechInput(speechInput);
        _output = $" ({recognitionResponse.TopIntent})";

        InvokeAsync(() => StateHasChanged());
    }

    [JSInvokable("SetSpeechInputCaller")]
    public static void SetSpeechInputCaller(string speechInput)
    {
        action.Invoke(speechInput);
    }
}