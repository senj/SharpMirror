@using System.ComponentModel;
@using Microsoft.Extensions.Logging;
@using SmartMirror.SmartHome.Hue;
@using SmartMirror.Data.Speech;

@inject IJSRuntime JSRuntime
@inject SpeechRecognitionService SpeechService
@inject ILogger<Speech> Logger

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <!-- display larger (click events) -->
        <div class="col-xl-2 d-none d-lg-block">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" onmousedown="startRecognition()" onmouseup="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageWeb">@((MarkupString)_symbol)</p>
        </div>
        <!-- only display on mobile (touch events) -->
        <div class="col-4 d-lg-none">
            @*<input type="button" class="btn btn-md btn-circle btn-secondary" ontouchstart="startRecognition()" ontouchend="stopRecognition()" value="Voice" />*@
            <p class="speechIcon" id="speechStatusImageMobile">@((MarkupString)_symbol)</p>
        </div>
        <div id="speechContainer" class="col-8 col-xl-10 overflow-auto">
            <p id="speechTextOutput"></p><span>@_output</span>
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public bool VoiceOutput { get; set; }

    private string _symbol { get; set; } = "&#128360";
    private string _output { get; set; }

    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    private EventHandler<SpeechStartedEventArgs> speechStartedEventHandler;
    private EventHandler<SpeechEndedEventArgs> speechEndedEventHandler;
    private EventHandler<SpeechRecognizedEventArgs> SpeechRecognizedEventHandler;
    private EventHandler<SpeechOutputEventArgs> SpeechOutputEventHandler;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {            
            SpeechRecognizedEventHandler = new EventHandler<SpeechRecognizedEventArgs>(OnSpeechRecognized);
            SpeechService.SpeechRecognized += SpeechRecognizedEventHandler;

            SpeechOutputEventHandler = new EventHandler<SpeechOutputEventArgs>(OnSpeechOutputRequested);
            SpeechService.SpeechOutputRequested += SpeechOutputEventHandler;
        }

        base.OnAfterRender(firstRender);
    }

    private void OnSpeechRecognized(object sender, SpeechRecognizedEventArgs args)
    {
        _output = $" ({args.TopIntent})";
        InvokeAsync(() => StateHasChanged());
    }

    private void OnSpeechOutputRequested(object sender, SpeechOutputEventArgs args)
    {
        if (VoiceOutput)
        {
            JSRuntime.InvokeVoidAsync("speak", args.Output).GetAwaiter().GetResult();
        }
    }

    private async Task ValidateSpeechInputAsync(string speechInput)
    {
        Logger.LogInformation("Validating {speechInput}.", speechInput);
        SpeechService.Recognizer_Recognized(speechInput);
    }

    #region STATIC PROPERTY HANDLING

    private static string _speechInput;
    public static string SpeechInput
    {
        get { return _speechInput; }

        set
        {
            if (_speechInput != value)
            {
                _speechInput = value;
                OnGlobalPropertyChanged("SpeechInput");
            }
        }
    }

    [JSInvokable]
    public static void SetSpeechInput(string speechInput)
    {
        SpeechInput = speechInput;
    }

    static event PropertyChangedEventHandler GlobalPropertyChanged = delegate { };
    static void OnGlobalPropertyChanged(string propertyName)
    {
        GlobalPropertyChanged(
            typeof(Speech),
            new PropertyChangedEventArgs(propertyName));
    }

    public Speech()
    {
        // This should use a weak event handler instead of normal handler
        GlobalPropertyChanged += this.HandleGlobalPropertyChanged;
    }

    void HandleGlobalPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case "SpeechInput":
                ValidateSpeechInputAsync(SpeechInput);
                break;
        }
    }

    #endregion
}