@using Microsoft.AspNetCore.Components.Authorization
@using SmartMirror.Data.Bring
@using SmartMirror.Data.Calendar
@using SmartMirror.Data.Clock
@using SmartMirror.Data.Fitbit
@using SmartMirror.Data.Fuel
@using SmartMirror.Data.GoogleFit
@using SmartMirror.Data.Layout
@using SmartMirror.Data.News
@using SmartMirror.Data.Routes
@using SmartMirror.Data.Soccer
@using SmartMirror.Data.Spotify
@using SmartMirror.Data.VVS
@using SmartMirror.Data.WeatherForecast
@using SmartMirror.HostConnection
@using SmartMirror.SmartHome.Hue
@using Microsoft.AspNetCore.Components

@inject ClockState _clockState;
@inject CalendarState _calendarState;
@inject NewsState _newsState;
@inject VvsState _vvsState;
@inject BringState _bringState;
@inject RouteState _routeState;
@inject SpotifyState _spotifyState;
@inject HueState _hueState;
@inject WeatherState _weatherState;
@inject FuelState _fuelState;
@*@inject FitbitState _fitbitState;*@
@inject GoogleFitState _googleFitState;
@inject SoccerState _bundesligaState;
@inject LayoutState _layoutState;

<div class="container-fluid" style="font-size: 0.9rem">
    <br />
    <h1>Toggle visibility</h1>
    <div class="row">
        <CascadingValue Value="User" Name="User">
            <div class="col-10">
                @foreach (StateBase entry in _statesCollection)
                {
                    <h2>@entry.Name (@entry.Enabled)</h2>
                    <button class="btn btn-primary" @onclick="() => ToggleState(entry)">Visibility</button>
                    <button class="btn btn-primary" @onclick="() => ToggleDetails(entry)">Details</button>
                    <button class="btn btn-primary" @onclick="() => MoveComponentUp(entry.Type)">+</button>
                    <button class="btn btn-primary" @onclick="() => MoveComponentDown(entry.Type)">-</button>
                    <button class="btn btn-primary" @onclick="() => ResetComponent(entry.Type)">0</button>
                    <span>@GetComponentOrder(entry.Type)</span>
                }
            </div>
        </CascadingValue>
    </div>
    <div class="row">
        <div class="col-10">
            <h2>Left count</h2>
            <button class="btn btn-primary" @onclick="() => _layoutState.RaiseLeftCount()">+</button>
            <button class="btn btn-primary" @onclick="() => _layoutState.LowerLeftCount()">-</button>
            <p>@_layoutState.LeftCount</p>

            <h2>Mid count</h2>
            <button class="btn btn-primary" @onclick="() => _layoutState.RaiseMidCount()">+</button>
            <button class="btn btn-primary" @onclick="() => _layoutState.LowerMidCount()">-</button>
            <p>@_layoutState.MidCount</p>

            <h2>Right count</h2>
            <button class="btn btn-primary" @onclick="() => _layoutState.RaiseRightCount()">+</button>
            <button class="btn btn-primary" @onclick="() => _layoutState.LowerRightCount()">-</button>
            <p>@_layoutState.RightCount</p>
        </div>
    </div>

    <div class="row">
        <div class="col-10">
            <button class="btn btn-danger" @onclick="() => ScriptRunner.RunScript()">Shutdown</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private System.Security.Claims.ClaimsPrincipal User { get; set; }
    private List<StateBase> _statesCollection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _statesCollection = new List<StateBase>
        {
            _clockState,
            _calendarState,
            _newsState,
            _vvsState,
            _bringState,
            _routeState,
            _spotifyState,
            _hueState,
            _weatherState,
            _fuelState,
            _googleFitState,
            _bundesligaState
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await authenticationStateTask;
        User = authState.User;
    }

    private EventCallback ToggleState(Displayable state)
    {
        state.SetEnabled(!state.Enabled);
        StateHasChanged();
        return new EventCallback();
    }

    private EventCallback ToggleDetails(Displayable state)
    {
        state.SetShowDetails(!state.ShowDetails);
        StateHasChanged();
        return new EventCallback();
    }

    private EventCallback MoveComponentUp(Type type)
    {
        _layoutState.MoveComponentUp(type);
        return new EventCallback();
    }

    private EventCallback MoveComponentDown(Type type)
    {
        _layoutState.MoveComponentDown(type);
        return new EventCallback();
    }

    private EventCallback ResetComponent(Type type)
    {
        _layoutState.ResetComponent(type);
        return new EventCallback();
    }

    private int GetComponentOrder(Type type)
    {
        return _layoutState.GetComponentOrder(type);
    }
}