@using SmartMirror.Data.Bring
@inject BringService BringService

@if (!Show)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">SHOPPING LIST</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (Items?.purchase == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (Items.purchase.Any())
            {
                @for (int i = 0; i < Items.purchase.Length; i += 3)
                {
                    <div class="row">
                        <span class="bring-item col-4">
                            @Items.purchase[i].name
                            @if (!string.IsNullOrEmpty(Items.purchase[i].specification))
                            {
                                <span>(@Items.purchase[i].specification)</span>
                            }
                        </span>

                        @if (i + 1 < Items.purchase.Length)
                        {
                            <span class="bring-item col-4">
                                @Items.purchase[i + 1].name
                                @if (!string.IsNullOrEmpty(Items.purchase[i + 1].specification))
                                {
                                    <span>(@Items.purchase[i + 1].specification)</span>
                                }
                            </span>
                        }

                        @if (i + 2 < Items.purchase.Length)
                        {
                            <span class="bring-item col-4">
                                @Items.purchase[i + 2].name
                                @if (!string.IsNullOrEmpty(Items.purchase[i + 2].specification))
                                {
                                    <span>(@Items.purchase[i + 2].specification)</span>
                                }
                            </span>
                        }
                    </div><br />
                }
            }
            else
            {
                <p>No items on shopping list.</p>
            }

            <br />
            <p><em>Füge der Liste {itemName (one word)} hinzu</em></p>
            <p><em>Füge der Liste genau {itemName (one word)} {details (one word)} hinzu".</em></p>
        </div>
    </div>
</div>
<br />

@code {
    [Parameter]
    public bool Show { get; set; }

    SmartMirror.Data.Bring.BringItemResponse Items { get; set; }
    private string Time { get; set; }
    private EventHandler<ShoppingListChangedEventArgs> shoppingListChangedEventHandler;

    [CascadingParameter(Name = "LayoutRazor")] protected Layout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Layout.AddToParent<Bring>(this);
        Items = await BringService.GetItemsAsync();
        var timer = new System.Threading.Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(async () =>
            {
                try
                {
                    Items = await BringService.GetItemsAsync();
                    StateHasChanged();
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 600 * 1000);

        shoppingListChangedEventHandler = new EventHandler<ShoppingListChangedEventArgs>(OnShoppingListChanged);
        BringService.ShoppingListChanged += shoppingListChangedEventHandler;

        base.OnInitializedAsync();
    }

    public async Task AddItem(string itemName, string details)
    {
        await BringService.AddItemAsync(itemName, details);
        Items = await BringService.GetItemsAsync(loadFromCache: false);
        StateHasChanged();
    }

    public void OnShoppingListChanged(object sender, ShoppingListChangedEventArgs args)
    {
        Items = BringService.GetItemsAsync(loadFromCache: false).GetAwaiter().GetResult();
        InvokeAsync(() => StateHasChanged());
    }
}
