@using SmartMirror.Data.Bring
@inject BringState State
@implements IDisposable

@if (!Enabled)
{
    return;
}

<div class="container-fluid card-1">
    <div class="row">
        <div class="col-12">
            <p class="box-heading">SHOPPING LIST</p>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (State?.Items?.purchase == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (State.Items.purchase.Any())
            {
                <p>@State.Items.purchase.Count() Artikel auf der Einkaufsliste</p>
                if (ShowDetails)
                {
                    @for (int i = 0; i < State.Items.purchase.Length; i += 3)
                    {
                        <div class="row">
                            <span class="bring-item col-3">
                                @State.Items.purchase[i].name
                                @if (!string.IsNullOrEmpty(State.Items.purchase[i].specification))
                                {
                                    <span class="subtitle"> (@State.Items.purchase[i].specification)</span>
                                }
                            </span>

                            @if (i + 1 < State.Items.purchase.Length)
                            {
                                <span class="bring-item col-3">
                                    @State.Items.purchase[i + 1].name
                                    @if (!string.IsNullOrEmpty(State.Items.purchase[i + 1].specification))
                                    {
                                        <span class="subtitle"> (@State.Items.purchase[i + 1].specification)</span>
                                    }
                                </span>
                            }

                            @if (i + 2 < State.Items.purchase.Length)
                            {
                                <span class="bring-item col-3">
                                    @State.Items.purchase[i + 2].name
                                    @if (!string.IsNullOrEmpty(State.Items.purchase[i + 2].specification))
                                    {
                                        <span class="subtitle"> (@State.Items.purchase[i + 2].specification)</span>
                                    }
                                </span>
                            }
                        </div><br />
                    }
                }
            }
            else
            {
                <p>No items on shopping list.</p>
            }
        </div>
    </div>
</div>
<br />

@code {
    private bool ShowDetails => State.ShowDetails;
    private bool Enabled => State.Enabled;

    private string Time { get; set; }

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChangedAsync;

        if (Enabled)
        {
            await State.GetItemsAsync(true);
        }

        var timer = new System.Threading.Timer((_) =>
        {
            Time = DateTime.UtcNow.ToString();
            InvokeAsync(async () =>
            {
                try
                {
                    if (Enabled)
                    {
                        await State.GetItemsAsync(false);
                    }
                }
                catch (ObjectDisposedException)
                {
                }
            });
        }, null, 0, 600 * 1000);
    }

    public async void StateHasChangedAsync()
    {
        if (Enabled && State.Items == null)
        {
            await State.GetItemsAsync(true);
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChangedAsync;
    }
}
