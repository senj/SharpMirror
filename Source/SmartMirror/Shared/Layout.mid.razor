@using SmartMirror.Data.Layout
@inject LayoutState LayoutState

<div class="container-fluid" style="font-size: 0.9rem">
    <br />
    <div class="row">
        <div class="col-lg-3 col-sm-12">
            @foreach (var widget in _components.Take(LayoutState.LeftCount))
            {
                <DynamicComponent Type="@widget" />
            }
        </div>

        <div class="col-lg-6">
            @foreach (var widget in _components.Skip(LayoutState.LeftCount).Take(LayoutState.MidCount))
            {
                <DynamicComponent Type="@widget" />
            }
        </div>
        <div class="col-lg-3">
           @foreach (var widget in _components.Skip(LayoutState.LeftCount + LayoutState.MidCount).Take(LayoutState.RightCount))
            {
                <DynamicComponent Type="@widget" />
            }
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-sm-12">
            <Speech></Speech>
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "Profile")] protected string Profile { get; set; }
    private IEnumerable<Type> _components => LayoutState.GetOrderedComponents();
    private int count = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LayoutState.OnChange += StateHasChangedAsync;

        LayoutState.AddComponents(new List<Type>
        {
            typeof(Clock),
            typeof(Calendar),
            typeof(Vvs),
            typeof(TempSensor),
            typeof(RouteTraffic),
            typeof(News),
            typeof(Bring),
            typeof(Bundesliga),
            typeof(CurrentWeather),
            typeof(Spotify),
            typeof(HueLights),
            typeof(Fuel),
            //typeof(Space),
            //typeof(Fitbit),
            typeof(GoogleFit),
        });
    }

    public async void StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}